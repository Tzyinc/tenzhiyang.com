{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["BlogList","posts","blogCount","setBlogCount","Fragment","style","display","flexDirection","justifyContent","onClick","Math","floor","length","filter","_","index","map","node","title","frontmatter","fields","slug","key","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","BlogIndex","props","data","useState","bakedCount","setBakedCount","talkCount","setTalkCount","siteTitle","site","siteMetadata","allMarkdownRemark","edges","item","type","baked","talks","location","role","aria-label","pageQuery"],"mappings":"2FAAA,gJA0EA,SAASA,EAAT,GAAuD,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aACpC,OACE,kBAAC,IAAMC,SAAP,KACE,yBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,eAAgB,kBAGjBN,EAAY,EAAI,EACf,4BACEO,QAAS,kBAEHN,EADJD,EAAY,EAAI,EACCA,EAAY,EACZQ,KAAKC,MAAMV,EAAMW,OAAS,MAJ/C,UAQA,8BAEiB,GAAjBV,EAAY,GAAS,EAAID,EAAMW,OAC/B,4BACEH,QAAS,kBACW,GAAjBP,EAAY,GAAS,EAAID,EAAMW,OAC5BT,EAAaD,EAAY,GACzBC,EAAa,KAJrB,UAQA,+BAIHF,EACEY,QACC,SAACC,EAAGC,GAAJ,OAAcA,GAAqB,EAAZb,EAAgB,GAAKa,EAAoB,EAAZb,KAErDc,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACAC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACE,yBAAKC,IAAKL,EAAKG,OAAOC,MACpB,wBACEhB,MAAO,CACLkB,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMnB,MAAO,CAAEoB,UAAU,QAAWC,GAAIT,EAAKG,OAAOC,MACjDH,IAGL,+BAAQD,EAAKE,YAAYQ,MACzB,uBACEC,wBAAyB,CACvBC,OAAQZ,EAAKE,YAAYW,aAAeb,EAAKc,gBAUhDC,UAjIf,SAAmBC,GAAQ,IACjBC,EAASD,EAATC,KADgB,EAEUC,mBAAS,GAApCjC,EAFiB,KAENC,EAFM,OAGYgC,mBAAS,GAAtCC,EAHiB,KAGLC,EAHK,OAIUF,mBAAS,GAApCG,EAJiB,KAINC,EAJM,KAKlBC,EAAYN,EAAKO,KAAKC,aAAaxB,MACnCjB,EAAQiC,EAAKS,kBAAkBC,MAAM/B,QACzC,SAAAgC,GAAI,MAAmC,SAA/BA,EAAK5B,KAAKE,YAAY2B,QAE1BC,EAAQb,EAAKS,kBAAkBC,MAAM/B,QACzC,SAAAgC,GAAI,MAAmC,UAA/BA,EAAK5B,KAAKE,YAAY2B,QAE1BE,EAAQd,EAAKS,kBAAkBC,MAAM/B,QACzC,SAAAgC,GAAI,MAAmC,SAA/BA,EAAK5B,KAAKE,YAAY2B,QAGhC,OACE,kBAAC,IAAD,CAAQG,SAAUhB,EAAMgB,SAAU/B,MAAOsB,GACvC,kBAAC,IAAD,CAAKtB,MAAM,mBACX,kBAAC,IAAD,MACC6B,EAAMnC,OAAS,GACd,kBAAC,IAAMR,SAAP,KACE,+CACmB,IACjB,0BAAM8C,KAAK,MAAMC,aAAW,aAA5B,UAIDnD,EAAS,CACRC,MAAO8C,EACP7C,UAAWkC,EACXjC,aAAckC,KAInBpC,EAAMW,OAAS,GACd,kBAAC,IAAMR,SAAP,KACE,uCACW,IACT,0BAAM8C,KAAK,MAAMC,aAAW,gBAA5B,OAIDnD,EAAS,CAAEC,QAAOC,YAAWC,kBAGjC6C,EAAMpC,OAAS,GACd,kBAAC,IAAMR,SAAP,KACE,oCACQ,IACN,0BAAM8C,KAAK,MAAMC,aAAW,gBAA5B,QAIDnD,EAAS,CACRC,MAAO+C,EACP9C,UAAWoC,EACXnC,aAAcoC,OA0EnB,IAAMa,EAAS,a","file":"component---src-pages-index-js-01ee68fe965bd2e9b3a3.js","sourcesContent":["import React, { useState } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport \"katex/dist/katex.min.css\"\n\nfunction BlogIndex(props) {\n  const { data } = props\n  const [blogCount, setBlogCount] = useState(1)\n  const [bakedCount, setBakedCount] = useState(1)\n  const [talkCount, setTalkCount] = useState(1)\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges.filter(\n    item => item.node.frontmatter.type === \"post\"\n  )\n  const baked = data.allMarkdownRemark.edges.filter(\n    item => item.node.frontmatter.type === \"baked\"\n  )\n  const talks = data.allMarkdownRemark.edges.filter(\n    item => item.node.frontmatter.type === \"talk\"\n  )\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO title=\"Ten's Thoughts\" />\n      <Bio />\n      {baked.length > 0 && (\n        <React.Fragment>\n          <h2>\n            Half-Baked Ideas{\" \"}\n            <span role=\"img\" aria-label=\"male chef\">\n              üë®‚Äçüç≥\n            </span>\n          </h2>\n          {BlogList({\n            posts: baked,\n            blogCount: bakedCount,\n            setBlogCount: setBakedCount,\n          })}\n        </React.Fragment>\n      )}\n      {posts.length > 0 && (\n        <React.Fragment>\n          <h2>\n            Writings{\" \"}\n            <span role=\"img\" aria-label=\"writing hand\">\n              ‚úçÔ∏è\n            </span>\n          </h2>\n          {BlogList({ posts, blogCount, setBlogCount })}\n        </React.Fragment>\n      )}\n      {talks.length > 0 && (\n        <React.Fragment>\n          <h2>\n            Talks{\" \"}\n            <span role=\"img\" aria-label=\"talking head\">\n              üó£Ô∏è\n            </span>\n          </h2>\n          {BlogList({\n            posts: talks,\n            blogCount: talkCount,\n            setBlogCount: setTalkCount,\n          })}\n        </React.Fragment>\n      )}\n    </Layout>\n  )\n}\n\nfunction BlogList({ posts, blogCount, setBlogCount }) {\n  return (\n    <React.Fragment>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        {blogCount - 1 > 0 ? (\n          <button\n            onClick={() =>\n              blogCount - 1 > 0\n                ? setBlogCount(blogCount - 1)\n                : setBlogCount(Math.floor(posts.length / 5))\n            }\n          >{`< prev`}</button>\n        ) : (\n          <div />\n        )}\n        {(blogCount + 1) * 5 - 5 < posts.length ? (\n          <button\n            onClick={() =>\n              (blogCount + 1) * 5 - 5 < posts.length\n                ? setBlogCount(blogCount + 1)\n                : setBlogCount(1)\n            }\n          >{`next >`}</button>\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {posts\n        .filter(\n          (_, index) => index >= blogCount * 5 - 5 && index < blogCount * 5\n        )\n        .map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          )\n        })}\n    </React.Fragment>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            type\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}