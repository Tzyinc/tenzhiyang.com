{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-02-28-no-matching-adjacent/","result":{"data":{"site":{"siteMetadata":{"title":"Ten's Thoughts","author":"Ten Zhi Yang"}},"markdownRemark":{"id":"5f0caf19-5e56-5ae9-bdae-ce24ccbcbe94","excerpt":"This may or may not be the optimal solution, DO NOT blindly memorize my solutions From Cassidy’s weekly newsletter. Target audience: beginners in js (please…","html":"<p><strong>This may or may not be the optimal solution, DO NOT blindly memorize my solutions</strong></p>\n<p>From <a href=\"https://twitter.com/cassidoo\">Cassidy’s</a> weekly <a href=\"https://buttondown.email/cassidoo/archive/2c66408b-dffb-4767-b754-0aad2d289226\">newsletter</a>.</p>\n<p>Target audience: beginners in js (please feedback!)</p>\n<blockquote>\n<p>Given a string str containing only the characters x and y, change it into a string such that there are no matching adjacent characters. You’re allowed to delete zero or more characters in the string. Find the minimum number of required deletions.</p>\n</blockquote>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ <span class=\"token function\">everyOther</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxyxxy'</span><span class=\"token punctuation\">)</span>\n$ <span class=\"token number\">2</span> <span class=\"token comment\">// str becomes ‘xyxy’</span>\n\n$ <span class=\"token function\">everyOther</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yyyyy'</span><span class=\"token punctuation\">)</span>\n$ <span class=\"token number\">4</span> <span class=\"token comment\">// str becomes ‘y’</span></code></pre></div>\n<p>This one came to me very quick. I would think that a optimal solution would not be any faster than O(n). If we look at the problem, we notice that essentially, the <code class=\"language-text\">matching adjacent characters</code> would mean looking at both side of all the characters. eg. in <code class=\"language-text\">123</code> we would look at the right of <code class=\"language-text\">1</code>, check that <code class=\"language-text\">2</code> is not the same and then do the same for <code class=\"language-text\">2</code>. We don’t have to check <code class=\"language-text\">2</code> back with <code class=\"language-text\">1</code> again as that would be a double count. This means that every character needs to be accessed at least once.</p>\n<p>Let’s write a loop, were we start from 0 and end at str.length - 2</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">everyOther</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>we then need to check the current letter with the next</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">everyOther</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> curr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr <span class=\"token operator\">===</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// do something here</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And if we look at the question again, notice that it only asks for a count, not the string after we’re done with it. So let’s add a counter.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">everyOther</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> curr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr <span class=\"token operator\">===</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And that’s it! Short one this week, but there’s no short of amazing solutions, particularly <a href=\"https://twitter.com/sophiebits/status/1363939556119048192\">the one by Sophie</a> stands out to me, I never would have thought of using regex, and there are plenty of interesting solutions which actually make use of the fact that the question specified that the entire expected input is only 2 different types of characters. It’s interesting to look at all the different ways people “brand” their code in in <a href=\"https://twitter.com/cassidoo/status/1363745457361592320\">the thread</a>. </p>","frontmatter":{"title":"No matching adjacent chars","date":"February 28, 2021"}}},"pageContext":{"slug":"/2021-02-28-no-matching-adjacent/","previous":{"fields":{"slug":"/2021-02-21-wildcard-matching/"},"frontmatter":{"title":"Weekly solutions: PPAP wildcard matching"}},"next":{"fields":{"slug":"/2021-03-07-paint-can-for-room/"},"frontmatter":{"title":"Paint can for room"}}}},"staticQueryHashes":["426816048","444714259"]}