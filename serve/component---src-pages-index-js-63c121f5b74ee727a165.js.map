{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["months","BlogList","posts","blogCount","setBlogCount","Fragment","style","display","flexDirection","justifyContent","onClick","Math","floor","length","filter","_","index","map","node","title","frontmatter","fields","slug","key","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","BlogIndex","props","data","useState","bakedCount","setBakedCount","tweetCount","setTweetCount","talkCount","setTalkCount","tweetList","setTweetList","siteTitle","site","siteMetadata","allMarkdownRemark","edges","item","type","baked","talks","tweets","in_reply_to_status_id","quoted_status","retweeted_status","useEffect","fetch","then","response","json","result","location","role","aria-label","id","paddingTop","borderTop","marginTop","className","dateStr","created_at","Date","month","getMonth","dd","getDate","yyyy","getFullYear","textDecoration","href","id_str","text","Tweets","pageQuery"],"mappings":"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","file":"component---src-pages-index-js-63c121f5b74ee727a165.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport \"katex/dist/katex.min.css\"\n\nfunction BlogIndex (props) {\n  const { data } = props;\n  const [blogCount, setBlogCount] = useState(1);\n  const [bakedCount, setBakedCount] = useState(1);\n  const [tweetCount, setTweetCount] = useState(1);\n  const [talkCount, setTalkCount] = useState(1);\n  const [tweetList, setTweetList] = useState([]);\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges.filter(item => item.node.frontmatter.type === \"post\")\n  const baked = data.allMarkdownRemark.edges.filter(item => item.node.frontmatter.type === \"baked\")\n  const talks = data.allMarkdownRemark.edges.filter(item => item.node.frontmatter.type === \"talk\")\n  const tweets = tweetList.filter(item => !item.in_reply_to_status_id && !item.quoted_status && !item.retweeted_status);\n\n  useEffect(() => {\n    // get data from GitHub api\n    fetch(`https://blogbackend.tenzhiyang.com/tweets`)\n      .then(response => response.json()) // parse JSON from request\n      .then(result => {\n        setTweetList(result)\n      }) // set data for the number of stars\n  }, [])\n  \n  return (\n    <Layout location={props.location}  title={siteTitle}>\n      <SEO title=\"Ten's Thoughts\" />\n      <Bio />\n      {\n        baked.length > 0 && (\n          <React.Fragment>\n            <h2>Half-Baked Ideas <span role=\"img\" aria-label=\"male chef\">üë®‚Äçüç≥</span></h2>\n            {BlogList({ posts: baked, blogCount: bakedCount, setBlogCount: setBakedCount })}\n          </React.Fragment>\n        )\n      }\n      {\n        posts.length > 0 && (\n          <React.Fragment>\n            <h2>Writings <span role=\"img\" aria-label=\"writing hand\">‚úçÔ∏è</span></h2>\n            {BlogList({ posts, blogCount, setBlogCount })}\n          </React.Fragment>\n        )\n      }\n      {\n        talks.length > 0 && (\n          <React.Fragment>\n            <h2>Talks <span role=\"img\" aria-label=\"talking head\">üó£Ô∏è</span></h2>\n            {BlogList({ posts: talks, blogCount: talkCount, setBlogCount: setTalkCount })}\n          </React.Fragment>\n        )\n      }\n      {\n        tweets.length > 0 && (\n          <React.Fragment>\n            <h2>Brain farts <span role=\"img\" aria-label=\"brain and wind\">üß†üí®</span></h2>\n            {Tweets({ posts: tweets, blogCount: tweetCount, setBlogCount: setTweetCount})}\n          </React.Fragment>\n        )\n      }\n    </Layout>\n  );\n}\n\nfunction Tweets({ posts, blogCount, setBlogCount }) {\n\n  return (<React.Fragment>\n    <div style={\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n      }\n    }>\n      {((blogCount - 1) > 0) ? <button onClick={() => ((blogCount - 1) > 0) ? setBlogCount(blogCount - 1) : setBlogCount(Math.floor(posts.length / 5))}>{`< prev`}</button> : <div />}\n      {(((blogCount + 1) * 5) - 5 < posts.length) ? <button onClick={() => (((blogCount + 1) * 5) - 5 < posts.length) ? setBlogCount(blogCount + 1) : setBlogCount(1)}>{`next >`}</button> : <div />}\n    </div>\n    {\n      posts.filter((_, index) => index >= (blogCount * 5 - 5) && index < blogCount * 5).map((node, index) => {\n        return (\n          <div key={node.id}\n            style={\n            index !== 0 ? {\n                paddingTop: \"20px\",\n                borderTop: \"1px solid var(--alt)\",\n                marginTop: \"20px\",\n            } : {\n\n            }}\n            className=\"tweetSection\"\n          >\n            <small>{generateDate(node.created_at)}</small>\n            <p>\n              <a style={{ boxShadow: `none`, textDecoration: `none` }} href={generateUrl(node.id_str)}>\n                {node.text}\n              </a>\n            </p>\n          </div>\n        )\n      })\n    }\n  </React.Fragment>)\n}\n\nfunction generateUrl(id) {\n  return `https://twitter.com/tzyinc/status/${id}`\n}\n\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nfunction generateDate(dateStr) {\n  const date = new Date(dateStr);\n  const month = months[date.getMonth()];\n  const dd = date.getDate();\n  const yyyy = date.getFullYear();\n  return `${month} ${dd}, ${yyyy}`\n}\n\nfunction BlogList({posts, blogCount, setBlogCount}) {\n  return (<React.Fragment>\n    <div style={\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n      }\n    }>\n      {((blogCount - 1) > 0) ? <button onClick={() => ((blogCount - 1) > 0) ? setBlogCount(blogCount - 1) : setBlogCount(Math.floor(posts.length / 5))}>{`< prev`}</button> : <div />}\n      {(((blogCount + 1) * 5) - 5 < posts.length) ? <button onClick={() => (((blogCount + 1) * 5) - 5 < posts.length) ? setBlogCount(blogCount + 1) : setBlogCount(1)}>{`next >`}</button> : <div />}\n    </div>\n\n    {\n      posts.filter((_, index) => index >= (blogCount * 5 - 5) && index < blogCount * 5).map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <div key={node.fields.slug}>\n            <h3\n              style={{\n                marginBottom: rhythm(1 / 4),\n              }}\n            >\n              <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                {title}\n              </Link>\n            </h3>\n            <small>{node.frontmatter.date}</small>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: node.frontmatter.description || node.excerpt,\n              }}\n            />\n          </div>\n        )\n      })\n    }\n  </React.Fragment>)\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            type\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}