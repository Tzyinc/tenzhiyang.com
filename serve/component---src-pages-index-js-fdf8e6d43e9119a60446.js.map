{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["BlogList","posts","blogCount","setBlogCount","Fragment","style","display","flexDirection","justifyContent","onClick","Math","floor","length","filter","_","index","map","node","title","frontmatter","fields","slug","key","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","BlogIndex","props","data","useState","bakedCount","setBakedCount","siteTitle","site","siteMetadata","allMarkdownRemark","edges","item","type","baked","location","className","data-height","href","pageQuery"],"mappings":"2FAAA,gJA+BA,SAASA,EAAT,GAAqD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,aACnC,OAAQ,kBAAC,IAAMC,SAAP,KACN,yBAAKC,MACH,CACEC,QAAS,OACTC,cAAe,MACfC,eAAgB,kBAGfN,EAAY,EAAK,EAAK,4BAAQO,QAAS,kBAA8BN,EAAtBD,EAAY,EAAK,EAAkBA,EAAY,EAAkBQ,KAAKC,MAAMV,EAAMW,OAAS,MAApH,UAA+I,8BACpJ,GAAjBV,EAAY,GAASD,EAAMW,OAAU,4BAAQH,QAAS,kBAAyB,GAAjBP,EAAY,GAASD,EAAMW,OAAUT,EAAaD,EAAY,GAAKC,EAAa,KAAzG,UAAmI,+BAI3KF,EAAMY,QAAO,SAACC,EAAGC,GAAJ,OAAcA,GAAsB,EAAZb,EAAgB,GAAMa,EAAoB,EAAZb,KAAec,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACjFC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACE,yBAAKC,IAAKL,EAAKG,OAAOC,MACpB,wBACEhB,MAAO,CACLkB,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMnB,MAAO,CAAEoB,UAAU,QAAWC,GAAIT,EAAKG,OAAOC,MACjDH,IAGL,+BAAQD,EAAKE,YAAYQ,MACzB,uBACEC,wBAAyB,CACvBC,OAAQZ,EAAKE,YAAYW,aAAeb,EAAKc,gBAU9CC,UA9Df,SAAoBC,GAAQ,IAClBC,EAASD,EAATC,KADiB,EAESC,mBAAS,GAApCjC,EAFkB,KAEPC,EAFO,OAGWgC,mBAAS,GAAtCC,EAHkB,KAGNC,EAHM,KAInBC,EAAYJ,EAAKK,KAAKC,aAAatB,MACnCjB,EAAQiC,EAAKO,kBAAkBC,MAAM7B,QAAO,SAAA8B,GAAI,MAAmC,SAA/BA,EAAK1B,KAAKE,YAAYyB,QAC1EC,EAAQX,EAAKO,kBAAkBC,MAAM7B,QAAO,SAAA8B,GAAI,MAAmC,UAA/BA,EAAK1B,KAAKE,YAAYyB,QAEhF,OACE,kBAAC,IAAD,CAAQE,SAAUb,EAAMa,SAAW5B,MAAOoB,GACxC,kBAAC,IAAD,CAAKpB,MAAM,mBACX,kBAAC,IAAD,MACA,sDACClB,EAAS,CAAEC,MAAO4C,EAAO3C,UAAWkC,EAAYjC,aAAckC,IAC/D,2CACCrC,EAAS,CAAEC,QAAOC,YAAWC,iBAC9B,gDACA,uBAAG4C,UAAU,mBAAmBC,cAAY,MAAMC,KAAK,kDAAvD,sBA+CC,IAAMC,EAAS","file":"component---src-pages-index-js-fdf8e6d43e9119a60446.js","sourcesContent":["import React, { useState } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport \"katex/dist/katex.min.css\"\n\nfunction BlogIndex (props) {\n  const { data } = props;\n  const [blogCount, setBlogCount] = useState(1);\n  const [bakedCount, setBakedCount] = useState(1);\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges.filter(item => item.node.frontmatter.type === \"post\")\n  const baked = data.allMarkdownRemark.edges.filter(item => item.node.frontmatter.type === \"baked\")\n  \n  return (\n    <Layout location={props.location}  title={siteTitle}>\n      <SEO title=\"Ten's Thoughts\" />\n      <Bio />\n      <h2>Half-Baked Ideas üë®‚Äçüç≥</h2>\n      {BlogList({ posts: baked, blogCount: bakedCount, setBlogCount: setBakedCount })}\n      <h2>Writings ‚úçÔ∏è</h2>\n      {BlogList({ posts, blogCount, setBlogCount })}\n      <h2>Brain farts üß†üí®</h2>\n      <a className=\"twitter-timeline\" data-height=\"600\" href=\"https://twitter.com/tzyinc?ref_src=twsrc%5Etfw\">Tweets by tzyinc</a>\n    </Layout>\n  );\n}\n\nfunction BlogList({posts, blogCount, setBlogCount}) {\n  return (<React.Fragment>\n    <div style={\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n      }\n    }>\n      {((blogCount - 1) > 0) ? <button onClick={() => ((blogCount - 1) > 0) ? setBlogCount(blogCount - 1) : setBlogCount(Math.floor(posts.length / 5))}>{`< prev`}</button> : <div />}\n      {((blogCount + 1) * 5 < posts.length) ? <button onClick={() => ((blogCount + 1) * 5 < posts.length) ? setBlogCount(blogCount + 1) : setBlogCount(1)}>{`next >`}</button> : <div />}\n    </div>\n\n    {\n      posts.filter((_, index) => index >= (blogCount * 5 - 5) && index < blogCount * 5).map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <div key={node.fields.slug}>\n            <h3\n              style={{\n                marginBottom: rhythm(1 / 4),\n              }}\n            >\n              <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                {title}\n              </Link>\n            </h3>\n            <small>{node.frontmatter.date}</small>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: node.frontmatter.description || node.excerpt,\n              }}\n            />\n          </div>\n        )\n      })\n    }\n  </React.Fragment>)\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            type\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}